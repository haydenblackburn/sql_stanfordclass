# SQL Movie-Rating Query Exercises Solutions

##1

Find the titles of all movies directed by Steven Spielberg.

```sql
SELECT title
  FROM movie
  WHERE director = 'Steven Spielberg';
```

##2

Find all years that have a movie that received a rating of 4 or 5, and sort 
them in increasing order. 

```sql
SELECT distinct(year) 
  FROM movie m
  JOIN rating r ON m.mID = r.mID
  WHERE r.stars = 4 or r.stars = 5
  ORDER BY m.year asc;
```

##3
Find the titles of all movies that have no ratings. 

```sql
SELECT DISTINCT(m.title)
  FROM Movie m 
  JOIN rating r 
  WHERE m.mid not in 
    (SELECT DISTINCT m.mid FROM movie AS m JOIN rating r WHERE m.mid = r.mid);
```

##4

Some reviewers didn't provide a date with their rating. Find the names of all reviewers 
who have ratings with a NULL value for the date. 

```sql
SELECT r.name
  FROM reviewer r
  JOIN rating rg on r.rid = rg.rid
  WHERE rg.ratingDate IS NULL;
```

##5

Write a query to return the ratings data in a more readable format: reviewer name, movie title, 
stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and 
lastly by number of stars. 

```sql
SELECT r.name, m.title, rg.stars, rg.ratingDate
  FROM movie m
  JOIN rating rg ON m.mID = rg.mID
  JOIN reviewer r ON rg.rID = r.rID
  ORDER BY r.name ASC, m.title ASC, rg.stars ASC;
```

##6

For all cases where the same reviewer rated the same movie twice and gave it a higher 
rating the second time, return the reviewer's name and the title of the movie. 

```sql
SELECT R.name, M.title
FROM movie m 
    JOIN rating r1 ON m.mid = r1.mid 
    JOIN rating r2 ON m.mid = r2.mid 
    JOIN reviewer r ON r1.rid = r.rid
    WHERE R1.stars < R2.stars AND R1.ratingDate < R2.ratingDate AND r2.rid=r1.rid;
```

##7

For each movie that has at least one rating, find the highest number of stars that movie 
received. Return the movie title and number of stars. Sort by movie title. 

```sql
SELECT m.title, max(r.stars)
  FROM movie m 
  JOIN rating r ON m.mid = r.mid
  WHERE r.stars > 0 
  GROUP BY m.title ;
```

##8

For each movie, return the title and the 'rating spread', that is, the difference between 
highest and lowest ratings given to that movie. Sort by rating spread from highest to 
lowest, then by movie title. 

```sql
SELECT m.title, MAX(r.stars) - MIN(r.stars) AS rating_spread
  FROM movie m 
  JOIN rating r ON m.mid = r.mid
  GROUP BY m.title
  ORDER BY rating_spread DESC;
```

##9

Find the difference between the average rating of movies released before 1980 and the 
average rating of movies released after 1980. (Make sure to calculate the average rating 
for each movie, then the average of those averages for movies before 1980 and movies 
after. Don't just calculate the overall average rating before and after 1980.) 

```sql
SELECT ABS(
  (SELECT AVG(t.s) 
      FROM 
  (SELECT avg(r.stars) AS s
      FROM rating r
      JOIN movie m ON r.mid = m.mid
      WHERE m.year > 1980
      GROUP BY m.title) AS t)
-
  (SELECT AVG(t.s) 
      FROM 
  (SELECT AVG(r.stars) AS s
      FROM rating r
      JOIN movie m ON r.mid = m.mid
      WHERE m.year < 1980
      GROUP BY m.title) AS t)
)
    ;
```
